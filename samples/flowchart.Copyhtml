<!DOCTYPE html>
<html>
<head>
<meta name="viewport" content="width=device-width, initial-scale=1">
<title>Flowchart</title>
<meta name="description" content="Interactive flowchart diagram implemented by GoJS in JavaScript for HTML." />
<!-- Copyright 1998-2018 by Northwoods Software Corporation. -->
<meta charset="UTF-8">
<style type="text/css">
  #myOverviewDiv {
    position: absolute;
    width:200px;
    height:100px;
    top: 10px;
    left: 10px;
    background-color: aliceblue;
    z-index: 300; /* make sure its in front */
    border: solid 1px blue;
  }
</style>
<script src="../release/go.js"></script>
<script src="../assets/js/goSamples.js"></script>  <!-- this is only for the GoJS Samples framework -->
<script id="code">
  function init() {
      // 加载其他布局页面
    // if (window.goSamples) goSamples();  // init for these samples -- you don't need to call this
    var $ = go.GraphObject.make;  // for conciseness in defining templates

    // each action is represented by a shape and some text
    var actionTemplate =
        $(go.Panel, "Horizontal",
            // $(go.Shape,
            //     { width: 2, height: 2 },
            //     // new go.Binding("figure"),
            //     // new go.Binding("fill")
            // ),
            $(go.TextBlock,
                { font: "10pt Verdana, sans-serif" },
                new go.Binding("text")
            )
        );

    myDiagram =
      $(go.Diagram, "myDiagramDiv",  // must name or refer to the DIV HTML element
        {
          initialContentAlignment: go.Spot.Center,
          allowDrop: true,  // must be true to accept drops from the Palette
          "LinkDrawn": showLinkLabel,  // this DiagramEvent listener is defined below
          "LinkRelinked": showLinkLabel,
          scrollsPageOnFocus: false,
          "undoManager.isEnabled": true  // enable undo & redo
        });

    // when the document is modified, add a "*" to the title and enable the "Save" button
    myDiagram.addDiagramListener("Modified", function(e) {
      var button = document.getElementById("SaveButton");
      if (button) button.disabled = !myDiagram.isModified;
      var idx = document.title.indexOf("*");
      if (myDiagram.isModified) {
        if (idx < 0) document.title += "*";
      } else {
        if (idx >= 0) document.title = document.title.substr(0, idx);
      }
    });

    // ----------------------- dynamic Ports start ---------------------
      // To simplify this code we define a function for creating a context menu button:
      function makeButton(text, action, visiblePredicate) {
          return $("ContextMenuButton",
              $(go.TextBlock, text),
              { click: action },
              // don't bother with binding GraphObject.visible if there's no predicate
              visiblePredicate ? new go.Binding("visible", "", function(o, e) { return o.diagram ? visiblePredicate(o, e) : false; }).ofObject() : {});
      }

      // To simplify this code we define a function for creating a context menu button:
      function makeIntentionButton(text, action, visiblePredicate) {
          return $("ContextMenuButton",
              $(go.TextBlock, text),
              { click: action },
              // don't bother with binding GraphObject.visible if there's no predicate
              visiblePredicate ? new go.Binding("visible", "", function(o, e) { return o.diagram ? visiblePredicate(o, e) : false; }).ofObject() : {});
      }

      var nodeMenu =  // context menu for each Node
          $(go.Adornment, "Vertical",
              // makeButton("Copy",
              //     function(e, obj) { e.diagram.commandHandler.copySelection(); }),
              // makeButton("Delete",
              //     function(e, obj) { e.diagram.commandHandler.deleteSelection(); }),
              // $(go.Shape, "LineH", { strokeWidth: 2, height: 1, stretch: go.GraphObject.Horizontal }),
              makeIntentionButton("添加意图",
                  function (e, obj) { addPort("bottom"); }),
              makeButton("删除话术",
                  function(e, obj) { e.diagram.commandHandler.deleteSelection(); })
          );

      var portSize = new go.Size(10, 10);

      var portMenu =  // context menu for each port
          $(go.Adornment, "Vertical",
              // makeButton("Swap order",
              //     function(e, obj) { swapOrder(obj.part.adornedObject); }),
              makeButton("删除意图",
                  // in the click event handler, the obj.part is the Adornment;
                  // its adornedObject is the port
                  function (e, obj) { removePort(obj.part.adornedObject); })
              // makeButton("Change color",
              //     function(e, obj) { changeColor(obj.part.adornedObject); }),
              // makeButton("Remove side ports",
              //     function (e, obj) { removeAll(obj.part.adornedObject); })
          );
    // ----------------------- dynamic Ports end ---------------------

    // helper definitions for node templates

    function nodeStyle() {
      return [
        // The Node.location comes from the "loc" property of the node data,
        // converted by the Point.parse static method.
        // If the Node.location is changed, it updates the "loc" property of the node data,
        // converting back using the Point.stringify static method.
        new go.Binding("location", "loc", go.Point.parse).makeTwoWay(go.Point.stringify),
        {
          // the Node.location is at the center of each node
          locationSpot: go.Spot.Center
        }
      ];
    }

    // Define a function for creating a "port" that is normally transparent.
    // The "name" is used as the GraphObject.portId,
    // the "align" is used to determine where to position the port relative to the body of the node,
    // the "spot" is used to control how links connect with the port and whether the port
    // stretches along the side of the node,
    // and the boolean "output" and "input" arguments control whether the user can draw links from or to the port.
    function makePort(name, align, spot, output, input) {
      var horizontal = align.equals(go.Spot.Top) || align.equals(go.Spot.Bottom);
      // the port is basically just a transparent rectangle that stretches along the side of the node,
      // and becomes colored when the mouse passes over it
      return $(go.Shape,
        {
          fill: "transparent",  // changed to a color in the mouseEnter event handler
          strokeWidth: 0,  // no stroke
          width: horizontal ? NaN : 8,  // if not stretching horizontally, just 8 wide
          height: !horizontal ? NaN : 8,  // if not stretching vertically, just 8 tall
          alignment: align,  // align the port on the main Shape
          stretch: (horizontal ? go.GraphObject.Horizontal : go.GraphObject.Vertical),
          portId: name,  // declare this object to be a "port"
          fromSpot: spot,  // declare where links may connect at this port
          fromLinkable: output,  // declare whether the user may draw links from here
          toSpot: spot,  // declare where links may connect at this port
          toLinkable: input,  // declare whether the user may draw links to here
          cursor: "pointer",  // show a different cursor to indicate potential link point
          mouseEnter: function(e, port) {  // the PORT argument will be this Shape
            if (!e.diagram.isReadOnly) port.fill = "rgba(255,0,255,0.5)";
          },
          mouseLeave: function(e, port) {
            port.fill = "transparent";
          }
        });
    }

    function textStyle() {
      return {
        font: "bold 11pt Helvetica, Arial, sans-serif",
        stroke: "whitesmoke"
      }
    }

    // define the Node templates for regular nodes

      // Step 图标样式
      myDiagram.nodeTemplate =
          $(go.Node, "Table",
              { locationObjectName: "BODY",
                  locationSpot: go.Spot.Center,
                  selectionObjectName: "BODY",
                  contextMenu: nodeMenu
              },
              new go.Binding("location", "loc", go.Point.parse).makeTwoWay(go.Point.stringify),

              // the body
              $(go.Panel, "Auto",
                  { row: 1, column: 1, name: "BODY",
                      stretch: go.GraphObject.Fill },
                  $(go.Shape, "Rectangle",
                      { fill: "#AC193D", stroke: null, strokeWidth: 0,
                          minSize: new go.Size(56, 56) }),
                  $(go.TextBlock,
                      { margin: 10, textAlign: "center", font: "14px  Segoe UI,sans-serif", stroke: "white", editable: true },
                      new go.Binding("text", "name").makeTwoWay())
              ),  // end Auto Panel body

              // the Panel holding the bottom port elements, which are themselves Panels,
              // created for each item in the itemArray, bound to data.bottomArray
              $(go.Panel, "Horizontal",
                  new go.Binding("itemArray", "bottomArray"),
                  { row: 2, column: 1,
                      itemTemplate:
                          $(go.Panel,
                              { _side: "bottom",
                                  fromSpot: go.Spot.Bottom, toSpot: go.Spot.Bottom,
                                  fromLinkable: true, toLinkable: true, cursor: "pointer",
                                  contextMenu: portMenu },
                              new go.Binding("portId", "portId"),
                              $(go.Shape, "Rectangle",
                                  { stroke: null, strokeWidth: 0,
                                      desiredSize: portSize,
                                      margin: new go.Margin(0, 1) },
                                  new go.Binding("fill", "portColor"))
                          )  // end itemTemplate
                  }
              )  // end Horizontal Panel
          );  // end Node

    // myDiagram.nodeTemplateMap.add("",  // the default category
    //
    //     $(go.Node, "Table",
    //         { locationObjectName: "BODY",
    //             locationSpot: go.Spot.Center,
    //             selectionObjectName: "BODY",
    //             contextMenu: nodeMenu
    //         },
    //         nodeStyle(),
    //         new go.Binding("location", "loc", go.Point.parse).makeTwoWay(go.Point.stringify),
    //
    //         // the body
    //         $(go.Panel,
    //             "Auto",
    //             { row: 1, column: 1, name: "BODY",
    //                 stretch: go.GraphObject.Fill },
    //             $(go.Shape, "Rectangle",
    //                 { fill: "#00A9C9", stroke: null, strokeWidth: 0, minSize: new go.Size(150, 56) }, new go.Binding("figure", "figure")),
    //             $(go.TextBlock,
    //                 { margin: 8, textAlign: "center", font: "11px  Segoe UI,sans-serif",
    //                     maxSize: new go.Size(160, NaN),
    //                     wrap: go.TextBlock.WrapFit,
    //                     editable: true,
    //                     stroke: "white", editable: true },
    //                 new go.Binding("text", "name").makeTwoWay()),
    //
    //             // four named ports, one on each side:
    //             makePort("T", go.Spot.Top, go.Spot.TopSide, false, true)
    //         ),  // end Auto Panel body
    //
    //         // the Panel holding the bottom port elements, which are themselves Panels,
    //         // created for each item in the itemArray, bound to data.bottomArray
    //         $(go.Panel, "Horizontal",
    //             new go.Binding("itemArray", "bottomArray"),
    //             { row: 2, column: 1,
    //                 itemTemplate:
    //                     $(go.Panel,
    //                         { _side: "bottom",
    //                             fromSpot: go.Spot.Bottom, toSpot: go.Spot.Bottom,
    //                             fromLinkable: true, toLinkable: false, cursor: "pointer",
    //                             contextMenu: portMenu },
    //                         new go.Binding("portId", "portId"),
    //                         $(go.Shape, "Rectangle",
    //                             { stroke: null, strokeWidth: 0,
    //                                 desiredSize: portSize,
    //                                 margin: new go.Margin(0, 15) },
    //                             new go.Binding("fill", "portColor"))
    //                     )  // end itemTemplate
    //             }
    //         )) // end Horizontal Panel
    // );

    myDiagram.nodeTemplateMap.add("Start",
      $(go.Node, "Table", nodeStyle(),
        $(go.Panel, "Auto",
          $(go.Shape, "Circle",
            { minSize: new go.Size(40, 40), fill: "#79C900", strokeWidth: 0 }),
          $(go.TextBlock, "Start", textStyle(),
            new go.Binding("text"))
        ),
        // three named ports, one on each side except the top, all output only:
        makePort("L", go.Spot.Left, go.Spot.Left, true, false),
        makePort("R", go.Spot.Right, go.Spot.Right, true, false),
        makePort("B", go.Spot.Bottom, go.Spot.Bottom, true, false)
      ));

    myDiagram.nodeTemplateMap.add("End",
      $(go.Node, "Table", nodeStyle(),
        $(go.Panel, "Auto",
          $(go.Shape, "Circle",
            { minSize: new go.Size(40, 40), fill: "#DC3C00", strokeWidth: 0 }),
          $(go.TextBlock, "End", textStyle(),
            new go.Binding("text"))
        ),
        // three named ports, one on each side except the bottom, all input only:
        makePort("T", go.Spot.Top, go.Spot.Top, false, true),
        makePort("L", go.Spot.Left, go.Spot.Left, false, true),
        makePort("R", go.Spot.Right, go.Spot.Right, false, true)
      ));

    myDiagram.nodeTemplateMap.add("Comment",
      $(go.Node, "Auto", nodeStyle(),
        $(go.Shape, "File",
          { fill: "#EFFAB4", strokeWidth: 0 }),
        $(go.TextBlock, textStyle(),
          {
            margin: 5,
            maxSize: new go.Size(200, NaN),
            wrap: go.TextBlock.WrapFit,
            textAlign: "center",
            editable: true,
            font: "bold 12pt Helvetica, Arial, sans-serif",
            stroke: '#454545'
          },
          new go.Binding("text").makeTwoWay())
        // no ports, because no links are allowed to connect with a comment
      ));

      // ------------------------------------------------ 左侧流程图标的样式 end -------------------------------------


    // replace the default Link template in the linkTemplateMap
    myDiagram.linkTemplate =
      $(go.Link,  // the whole link panel
        {
          routing: go.Link.AvoidsNodes,
          curve: go.Link.JumpOver,
          corner: 5, toShortLength: 4,
          relinkableFrom: true,
          relinkableTo: true,
          reshapable: true,
          resegmentable: true,
            // 鼠标移入移除线条的变化
          // mouse-overs subtly highlight links:
          mouseEnter: function(e, link) { link.findObject("HIGHLIGHT").stroke = "rgba(30,144,255,0.2)"; },
          mouseLeave: function(e, link) { link.findObject("HIGHLIGHT").stroke = "transparent"; },
          selectionAdorned: false
        },
        new go.Binding("points").makeTwoWay(),
        $(go.Shape,  // the highlight shape, normally transparent
          { isPanelMain: true, strokeWidth: 8, stroke: "transparent", name: "HIGHLIGHT" }),
        $(go.Shape,  // the link path shape
          { isPanelMain: true, stroke: "gray", strokeWidth: 2 },
          new go.Binding("stroke", "isSelected", function(sel) { return sel ? "dodgerblue" : "gray"; }).ofObject()),
        $(go.Shape,  // the arrowhead
          { toArrow: "standard", strokeWidth: 0, fill: "gray"}),
        $(go.Panel, "Auto",  // the link label, normally not visible
          { visible: false, name: "LABEL", segmentIndex: 2, segmentFraction: 0.5},
          new go.Binding("visible", "visible").makeTwoWay(),
          $(go.Shape, "RoundedRectangle",  // the label shape
            { fill: "#F8F8F8", strokeWidth: 0 }),
          $(go.TextBlock, "肯定回答",  // the label
            {
              textAlign: "center",
              font: "7pt helvetica, arial, sans-serif",
              stroke: "#333333",
              editable: true
            },
            new go.Binding("text").makeTwoWay())
        )
      );

    // Make link labels visible if coming out of a "conditional" node.
    // This listener is called by the "LinkDrawn" and "LinkRelinked" DiagramEvents.
    function showLinkLabel(e) {
      var label = e.subject.findObject("LABEL");
      // if (label !== null) label.visible = (e.subject.fromNode.data.category === "Conditional");
        // 显示线上的label
      if (label !== null) label.visible = true;
    }

    // temporary links used by LinkingTool and RelinkingTool are also orthogonal:
    myDiagram.toolManager.linkingTool.temporaryLink.routing = go.Link.Orthogonal;
    myDiagram.toolManager.relinkingTool.temporaryLink.routing = go.Link.Orthogonal;

      // support double-clicking in the background to add a copy of this data as a node
      myDiagram.toolManager.clickCreatingTool.archetypeNodeData = {
          name: "Unit",
          leftArray: [],
          rightArray: [],
          topArray: [],
          bottomArray: []
      };

    load();  // load an initial diagram from some JSON text

      // --------------------------- 添加左侧的流程的图标 start -----------------------------------------

    // initialize the Palette that is on the left side of the page
    myPalette =
      $(go.Palette, "myPaletteDiv",  // must name or refer to the DIV HTML element
        {
          scrollsPageOnFocus: false,
          nodeTemplateMap: myDiagram.nodeTemplateMap,  // share the templates used by myDiagram
          model: new go.GraphLinksModel([  // specify the contents of the Palette
            { category: "Start", text: "Start" },
            { text: "Step", name: "Step",
                "bottomArray":[] },
            { category: "Conditional", text: "???" },
            { category: "End", text: "End" },
            { category: "Ports", name: "Ports",
                "topArray":[ {"portColor":"#77ac1e", "portId":"top0"} ],
                "bottomArray":[ {"portColor":"#e9701b", "portId":"bottom0"} ]},
            { category: "Comment", text: "Comment" }
          ])
        });

    // 添加缩略图
      // Overview
      myOverview =
          $(go.Overview, "myOverviewDiv",  // the HTML DIV element for the Overview
              { observed: myDiagram, contentAlignment: go.Spot.Center });   // tell it which Diagram to show and pan

      // Ports
      myDiagram.contextMenu =
          $(go.Adornment, "Vertical",
              // makeButton("Paste",
              //     function(e, obj) { e.diagram.commandHandler.pasteSelection(e.diagram.lastInput.documentPoint); },
              //     function(o) { return o.diagram.commandHandler.canPasteSelection(); }),
              // makeButton("Undo",
              //     function(e, obj) { e.diagram.commandHandler.undo(); },
              //     function(o) { return o.diagram.commandHandler.canUndo(); }),
              // makeButton("Redo",
              //     function(e, obj) { e.diagram.commandHandler.redo(); },
              //     function(o) { return o.diagram.commandHandler.canRedo(); })
          );

  } // end init


  // This custom-routing Link class tries to separate parallel links from each other.
  // This assumes that ports are lined up in a row/column on a side of the node.
  function CustomLink() {
      go.Link.call(this);
  };
  go.Diagram.inherit(CustomLink, go.Link);

  CustomLink.prototype.findSidePortIndexAndCount = function(node, port) {
      var nodedata = node.data;
      if (nodedata !== null) {
          var portdata = port.data;
          var side = port._side;
          var arr = nodedata[side + "Array"];
          var len = arr.length;
          for (var i = 0; i < len; i++) {
              if (arr[i] === portdata) return [i, len];
          }
      }
      return [-1, len];
  };

  /** @override */
  CustomLink.prototype.computeEndSegmentLength = function(node, port, spot, from) {
      var esl = go.Link.prototype.computeEndSegmentLength.call(this, node, port, spot, from);
      var other = this.getOtherPort(port);
      if (port !== null && other !== null) {
          var thispt = port.getDocumentPoint(this.computeSpot(from));
          var otherpt = other.getDocumentPoint(this.computeSpot(!from));
          if (Math.abs(thispt.x - otherpt.x) > 20 || Math.abs(thispt.y - otherpt.y) > 20) {
              var info = this.findSidePortIndexAndCount(node, port);
              var idx = info[0];
              var count = info[1];
              if (port._side == "top" || port._side == "bottom") {
                  if (otherpt.x < thispt.x) {
                      return esl + 4 + idx * 8;
                  } else {
                      return esl + (count - idx - 1) * 8;
                  }
              } else {  // left or right
                  if (otherpt.y < thispt.y) {
                      return esl + 4 + idx * 8;
                  } else {
                      return esl + (count - idx - 1) * 8;
                  }
              }
          }
      }
      return esl;
  };

  /** @override */
  CustomLink.prototype.hasCurviness = function() {
      if (isNaN(this.curviness)) return true;
      return go.Link.prototype.hasCurviness.call(this);
  };

  /** @override */
  CustomLink.prototype.computeCurviness = function() {
      if (isNaN(this.curviness)) {
          var fromnode = this.fromNode;
          var fromport = this.fromPort;
          var fromspot = this.computeSpot(true);
          var frompt = fromport.getDocumentPoint(fromspot);
          var tonode = this.toNode;
          var toport = this.toPort;
          var tospot = this.computeSpot(false);
          var topt = toport.getDocumentPoint(tospot);
          if (Math.abs(frompt.x - topt.x) > 20 || Math.abs(frompt.y - topt.y) > 20) {
              if ((fromspot.equals(go.Spot.Left) || fromspot.equals(go.Spot.Right)) &&
                  (tospot.equals(go.Spot.Left) || tospot.equals(go.Spot.Right))) {
                  var fromseglen = this.computeEndSegmentLength(fromnode, fromport, fromspot, true);
                  var toseglen = this.computeEndSegmentLength(tonode, toport, tospot, false);
                  var c = (fromseglen - toseglen) / 2;
                  if (frompt.x + fromseglen >= topt.x - toseglen) {
                      if (frompt.y < topt.y) return c;
                      if (frompt.y > topt.y) return -c;
                  }
              } else if ((fromspot.equals(go.Spot.Top) || fromspot.equals(go.Spot.Bottom)) &&
                  (tospot.equals(go.Spot.Top) || tospot.equals(go.Spot.Bottom))) {
                  var fromseglen = this.computeEndSegmentLength(fromnode, fromport, fromspot, true);
                  var toseglen = this.computeEndSegmentLength(tonode, toport, tospot, false);
                  var c = (fromseglen - toseglen) / 2;
                  if (frompt.x + fromseglen >= topt.x - toseglen) {
                      if (frompt.y < topt.y) return c;
                      if (frompt.y > topt.y) return -c;
                  }
              }
          }
      }
      return go.Link.prototype.computeCurviness.call(this);
  };
  // end CustomLink class


  // Add a port to the specified side of the selected nodes.
  function addPort(side) {
      console.log(side)
      myDiagram.startTransaction("addPort");
      myDiagram.selection.each(function(node) {
          console.log(node)
          // skip any selected Links
          if (!(node instanceof go.Node)) return;
          // compute the next available index number for the side
          var i = 0;
          while (node.findPort(side + i.toString()) !== node) i++;
          // now this new port name is unique within the whole Node because of the side prefix
          var name = side + i.toString();
          // get the Array of port data to be modified
          var arr = node.data[side + "Array"];
          if (arr) {
              // create a new port data object
              var newportdata = {
                  portId: name,
                  portColor: go.Brush.randomColor()
                  // if you add port data properties here, you should copy them in copyPortData above
              };
              // and add it to the Array of port data
              myDiagram.model.insertArrayItem(arr, -1, newportdata);
          }
      });
      myDiagram.commitTransaction("addPort");
  }

  // Exchange the position/order of the given port with the next one.
  // If it's the last one, swap with the previous one.
  function swapOrder(port) {
      var arr = port.panel.itemArray;
      if (arr.length >= 2) {  // only if there are at least two ports!
          for (var i = 0; i < arr.length; i++) {
              if (arr[i].portId === port.portId) {
                  myDiagram.startTransaction("swap ports");
                  if (i >= arr.length - 1) i--;  // now can swap I and I+1, even if it's the last port
                  var newarr = arr.slice(0);  // copy Array
                  newarr[i] = arr[i + 1];  // swap items
                  newarr[i + 1] = arr[i];
                  // remember the new Array in the model
                  myDiagram.model.setDataProperty(port.part.data, port._side + "Array", newarr);
                  myDiagram.commitTransaction("swap ports");
                  break;
              }
          }
      }
  }

  // Remove the clicked port from the node.
  // Links to the port will be redrawn to the node's shape.
  function removePort(port) {
      myDiagram.startTransaction("removePort");
      var pid = port.portId;
      var arr = port.panel.itemArray;
      for (var i = 0; i < arr.length; i++) {
          if (arr[i].portId === pid) {
              myDiagram.model.removeArrayItem(arr, i);
              break;
          }
      }
      myDiagram.commitTransaction("removePort");
  }

  // Remove all ports from the same side of the node as the clicked port.
  function removeAll(port) {
      myDiagram.startTransaction("removePorts");
      var nodedata = port.part.data;
      var side = port._side;  // there are four property names, all ending in "Array"
      myDiagram.model.setDataProperty(nodedata, side + "Array", []);  // an empty Array
      myDiagram.commitTransaction("removePorts");
  }

  // Change the color of the clicked port.
  function changeColor(port) {
      myDiagram.startTransaction("colorPort");
      var data = port.data;
      myDiagram.model.setDataProperty(data, "portColor", go.Brush.randomColor());
      myDiagram.commitTransaction("colorPort");
  }

  // --------------------------- 添加左侧的流程的图标 end -----------------------------------------


  // 保存当前流程图的当前位置
  // Show the diagram's model in JSON format that the user may edit
  function save() {
    document.getElementById("mySavedModel").value = myDiagram.model.toJson();
    console.log("save myDiagram.model.toJson() == ")
      console.log(myDiagram.model.toJson())
    myDiagram.isModified = false;
  }

  // 通过流程图的位置信息 JSON 加载流程图
  function load() {
    myDiagram.model = go.Model.fromJson(document.getElementById("mySavedModel").value);
  }

  // 打印图表
  // print the diagram by opening a new window holding SVG images of the diagram contents for each page
  function printDiagram() {
    var svgWindow = window.open();
    if (!svgWindow) return;  // failure to open a new Window
    var printSize = new go.Size(700, 960);
    var bnds = myDiagram.documentBounds;
    var x = bnds.x;
    var y = bnds.y;
    while (y < bnds.bottom) {
      while (x < bnds.right) {
        var svg = myDiagram.makeSVG({ scale: 1.0, position: new go.Point(x, y), size: printSize });
        svgWindow.document.body.appendChild(svg);
        x += printSize.width;
      }
      x = bnds.x;
      y += printSize.height;
    }
    setTimeout(function() { svgWindow.print(); }, 1);
  }
</script>
</head>
<body onload="init()">
<div></div>
<div id="sample">
  <div style="width: 100%; display: flex; justify-content: space-between">
    <!-- 左侧流程框的视图 -->
    <div id="myPaletteDiv" style="width: 100px; margin-right: 2px; background-color: whitesmoke; border: solid 1px black"></div>
    <!-- 流程图的画布 -->
    <div id="myDiagramDiv" style="flex-grow: 1; height: 750px; border: solid 1px black"></div>
    <div id="myOverviewDiv" style="margin-left: 92px;margin-top: 5px"></div> <!-- Styled in a <style> tag at the top of the html page -->
  </div>
  <!--<p>-->
  <!--The FlowChart sample demonstrates several key features of GoJS,-->
  <!--namely <a href="../intro/palette.html">Palette</a>s,-->
  <!--<a href="../intro/links.html">Linkable nodes</a>, Drag/Drop behavior,-->
  <!--<a href="../intro/textBlocks.html">Text Editing</a>, and the use of-->
  <!--<a href="../intro/templateMaps.html">Node Template Maps</a> in Diagrams.-->
  <!--</p>-->
  <!--<p>-->
  <!--Mouse-over a Node to view its ports.-->
  <!--Drag from these ports to create new Links.-->
  <!--Selecting Links allows you to re-shape and re-link them.-->
  <!--Selecting a Node and then clicking its TextBlock will allow-->
  <!--you to edit text (except on the Start and End Nodes).-->
  <!--</p>-->
  <button id="SaveButton" onclick="save()">Save</button>
  <button onclick="load()">Load</button>
  Diagram Model saved in JSON format:
  <textarea id="mySavedModel" style="width:100%;height:300px">
{ "class": "go.GraphLinksModel",
  "linkFromPortIdProperty": "fromPort",
  "linkToPortIdProperty": "toPort",
  "nodeDataArray": [
{"category":"Comment", "loc":"360 -10", "text":"Kookie Brittle", "key":-13},
{"key":-1, "category":"Start", "loc":"175 0", "text":"Start"},
{"key":0, "loc":"-5 75", "text":"Preheat oven to 375 F"},
{"key":1, "loc":"175 100", "text":"In a bowl, blend: 1 cup margarine, 1.5 teaspoon vanilla, 1 teaspoon salt"},
{"key":2, "loc":"175 200", "text":"Gradually beat in 1 cup sugar and 2 cups sifted flour"},
{"key":3, "loc":"175 290", "text":"Mix in 6 oz (1 cup) Nestle's Semi-Sweet Chocolate Morsels"},
{"key":4, "loc":"175 380", "text":"Press evenly into ungreased 15x10x1 pan"},
{"key":5, "loc":"355 85", "text":"Finely chop 1/2 cup of your choice of nuts"},
{"key":6, "loc":"175 450", "text":"Sprinkle nuts on top"},
{"key":7, "loc":"175 515", "text":"Bake for 25 minutes and let cool"},
{"key":8, "loc":"175 585", "text":"Cut into rectangular grid"},
{"key":-2, "category":"End", "loc":"175 660", "text":"Enjoy!"},
    {"key":-5, "category":"Ports", "name":"Ports", "loc":"-204 261",
     "bottomArray":[ {"portColor":"#e9701b", "portId":"bottom0"} ],
      "actions": [
            { "text": "Representative粉骨碎身所所所所所所所所多多多多多多多多多多多多多多多多多多多多多多多多多多多多多多多多多多多多多多多多多多多" }
          ]}
 ],
  "linkDataArray": [
{"from":1, "to":2, "fromPort":"B", "toPort":"T"},
{"from":2, "to":3, "fromPort":"B", "toPort":"T"},
{"from":3, "to":4, "fromPort":"B", "toPort":"T"},
{"from":4, "to":6, "fromPort":"B", "toPort":"T"},
{"from":6, "to":7, "fromPort":"B", "toPort":"T"},
{"from":7, "to":8, "fromPort":"B", "toPort":"T"},
{"from":8, "to":-2, "fromPort":"B", "toPort":"T"},
{"from":-1, "to":0, "fromPort":"B", "toPort":"T"},
{"from":-1, "to":1, "fromPort":"B", "toPort":"T"},
{"from":-1, "to":5, "fromPort":"B", "toPort":"T"},
{"from":5, "to":4, "fromPort":"B", "toPort":"T"},
{"from":0, "to":4, "fromPort":"B", "toPort":"T"}
 ]}
  </textarea>
  <button onclick="printDiagram()">Print Diagram Using SVG</button>
</div>
</body>
</html>
